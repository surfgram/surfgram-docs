# APIObject

Telegram Bot API Response Wrapper

## Usage

`APIObject` provides a convenient way to work with Telegram Bot API responses by wrapping JSON data in a dynamic object structure.

### Basic Implementation

```python
from surfgram.types import APIObject

# Sample API response
response = {
    "id": 12345,
    "first_name": "John",
    "last_name": "Doe",
    "settings": {"notifications": True}
}

# Create APIObject wrapper
user = APIObject(response)

# Access fields as attributes
print(user.id)  # 12345
print(user.first_name)  # "John"
print(user.settings.notifications)  # True
```

## Core Features

### Dynamic Attribute Access
- Direct access to JSON fields as object attributes
- Nested dictionaries automatically become `APIObject` instances
- Intelligent attribute suggestions for mistyped names

### Error Handling
- Raises `AttributeError` with suggestions when attributes don't exist
- Example: `user.nme` â†’ suggests `Did you mean 'name'?` if available

## Methods

### `__init__(data: Dict[str, Any])`
Initializes the wrapper with API response data.

**Parameters:**
- `data`: Raw API response dictionary (typically from Telegram Bot API)

### `__getattr__(item: str) -> Any`
Provides dynamic attribute access to the response data.

**Behavior:**
- Returns value for existing keys
- Automatically wraps nested dictionaries in new `APIObject` instances
- Provides helpful suggestions for mistyped attribute names

### `__repr__() -> str`
Returns a clean string representation showing the wrapped data.

## Production Usage Example

Here's how to use `APIObject` in a command handler:

```python
from surfgram.types import Command
from typing import Callable

class SomeHandler(Command):
    @property
    def __names__(self):
        return ["something"]

    @property
    def __callback__(self) -> Callable:
        return self.handle

    async def handle(self, update, bot): # update is APIObject
        # Access update attributes through APIObject
        chat_id = update.message.chat.id
        
        await bot.send_message(
            chat_id=chat_id,
            text="Some text"
        )
```